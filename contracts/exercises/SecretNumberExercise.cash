pragma cashscript ^0.11.0;
 /**
 * @params {pubkey} owner - 
 * The public key of the owner of this contract.
 *
 * @params {bytes32} secretNumberHash - 
 * The sha256 hash of the absolute difference 
 * of num1 and num2 secret shards. 

 * Guess two numbers, such that, when you hash the difference of the two numbers
 * it is equal to ca358758f6d27e6cf45272937977a748fd88391db679ceda7dc7bf1f005ee879
 * Hint: 
 *     1. Use online sha256 online hashing tool to get the hash of the difference (Mind the encoding, you are hashing a number, 1 is different from '1')
 *     2. Use this parameters to create the contract. 
 *         Contract parameters: 
            a. A Wallet public key = 03d7bdae382f07f2e491f7b253ce554fce3eb307e1ee4a5fe51522febb8fbcb09c
            b. The hash of the difference = ca358758f6d27e6cf45272937977a748fd88391db679ceda7dc7bf1f005ee879
 *     3. Spend from the contract using the unlockUsingSecretNumbers function.
 */        
 contract SecretNumbersDemo(pubkey owner, bytes32 secretNumberHash) {

     function unlockUsingSecretNumbers(int num1, int num2) {
         // Compute min and max of the inputs
         int small = min(num1, num2);
         int big = max(num1, num2);

         // Enforce constraints on min and max
         require(small >= 1, "Min must be at least 1");
         require(big <= 15, "Max must be less than or equal to 15");

         // Compute absolute difference
         int diff = abs(num1 - num2);

         // Require that the hash of the difference matches the committed message hash
         require(sha256(diff) == secretNumberHash, "Hash mismatch");
     }

     function unlockUsingPrivateKey (sig s) {
         require(checkSig(s, owner), "Invalid signature");
     }
 }