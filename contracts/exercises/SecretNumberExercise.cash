pragma cashscript ^0.8.0;
 /**
 * @params {pubkey} owner - 
 * The public key of the owner of this contract.
 *
 * @params {bytes32} secretNumberHash - 
 * The sha256 hash of the absolute difference 
 * of num1 and num2 secret shards. 
 * Hint: 
 *     1. Select two numbers you like (Mind the range, read contract condition)
 *     2. Compute the difference (subtract the numbers)
 *     3. Use online sha256 online hashing tool (Mind the encoding, you are hashing a number, 1 is different from '1')
 *     4. Create the contract, 
 *         Contract parameters: a. A Wallet public key, b. The hash you get from step 3
 *     6. Spend from the contract
 *         Spend parameters: The two numbers you've selected on step 1.
 */        
 contract SecretNumbersDemo(pubkey owner, bytes32 secretNumberHash) {

     function unlockUsingSecretNumbers(int num1, int num2) {
         // Compute min and max of the inputs
         int small = min(num1, num2);
         int big = max(num1, num2);

         // Enforce constraints on min and max
         require(small >= 1, "Min must be at least 1");
         require(big <= 15, "Max must be less than or equal to 15");

         // Compute absolute difference
         int diff = abs(num1 - num2);

         // Require that the hash of the difference matches the committed message hash
         require(sha256(diff) == secretNumberHash, "Hash mismatch");
     }

     function unlockUsingPrivateKey (sig s) {
         require(checkSig(s, owner), "Invalid signature");
     }
 }