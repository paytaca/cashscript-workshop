pragma cashscript ^0.11.0;                     // 1
//
/*
This contract demonstrates **type casting** between `bytes` and `int` in 
CashScript. A spender provides raw bytes, which are converted into an integer. 
The contract checks that this integer matches a predefined expected value, then 
casts it back into bytes to confirm consistency. This round-trip validation 
ensures that both representations are equivalent and prevents malformed or 
ambiguous data from being used. 
*/
contract CastingDemo(int expected) {            // 2: Stores expected integer
    function spend(bytes b) {                   // 3: Spend requires bytes input
        int n = int(b);                         // 4: Cast bytes → int
        require(n == expected);                 // 5: Check integer matches expected
        bytes bb = bytes(expected);             // 6: Cast int → bytes
        require(bb == b);                       // 7: Ensure round-trip matches
    }
}

/*
Speaker Notes:
1. Compiler version.
2. Contract stores an integer value.
3. Spend requires providing a bytes argument.
4. Casts the bytes argument into an integer.
5. Checks that this integer matches the stored expected value.
6. Converts the integer back into bytes.
7. Ensures the result matches the original input.
   This demonstrates type casting and strict data handling in CashScript.
*/
