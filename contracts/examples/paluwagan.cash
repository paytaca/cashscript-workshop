pragma cashscript ^0.11.0;


contract Paluwagan (
    bytes20 member1,
    bytes20 member2,
    bytes20 member3,
    bytes20 member4,
    bytes20 member5,
    bytes32 nftCategory,
    int potAmount,
    int period,
) {
    
    function redeem () {
        // all UTXO age must be at least <period> days old
        require(this.age >= period);

        // at least 5 UTXOs (contributions) must be present in the transaction
        int constant MEMBERS_COUNT = 5;
        require(tx.inputs.length >= MEMBERS_COUNT);
        
        // 0th output
        require(tx.outputs[0].value == 1000);  // dust
        require(tx.outputs[0].tokenCategory == nftCategory + 0x01);  // must be a mutable NFT

        // passing of schedule using the NFT commitment as tracker
        bytes20 commitmentPubkeyHash = bytes20(tx.inputs[0].nftCommitment);
        if (commitmentPubkeyHash == member1) { require(tx.outputs[0].nftCommitment == member2); }
        else if (commitmentPubkeyHash == member2) { require(tx.outputs[0].nftCommitment == member3); }
        else if (commitmentPubkeyHash == member3) { require(tx.outputs[0].nftCommitment == member4); }
        else if (commitmentPubkeyHash == member4) { require(tx.outputs[0].nftCommitment == member5); }
        else if (commitmentPubkeyHash == member5) { require(tx.outputs[0].nftCommitment == member1); }

        /**
            0th output: to contract (Tracker NFT with updated commitment)
            1st output: to redeemer (pot amount - redeemer's next contribution - fee)
            2nd output: to contract (redeemer's next contribution)
        */

        int fee = 1100;
        int individualContribution = potAmount / MEMBERS_COUNT;
        int amount = potAmount - individualContribution - fee;
        bytes20 redeemerPubkeyHash = bytes20(tx.inputs[0].nftCommitment);  // 0th input must be the tracker NFT
        bytes25 redeemer = new LockingBytecodeP2PKH(redeemerPubkeyHash);

        // 1st output
        require(tx.outputs[1].lockingBytecode == redeemer);
        require(tx.outputs[1].value == amount);

        // 2nd output
        require(tx.outputs[2].lockingBytecode == tx.inputs[0].lockingBytecode);  // must be sent back to contract
        require(tx.outputs[2].value == individualContribution);
    }

}